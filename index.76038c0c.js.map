{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    initState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    state = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    score = 0;\n    status = \"idle\";\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        if (initialState) {\n            this.state = JSON.parse(JSON.stringify(initialState));\n            this.initState = JSON.parse(JSON.stringify(initialState));\n        }\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        const prevState = JSON.stringify(this.state);\n        this.state.forEach((row)=>{\n            let compressedRow = row.filter((num)=>num !== 0);\n            while(compressedRow.length < 4)compressedRow.push(0);\n            for(let i = 0; i < compressedRow.length - 1; i++)if (compressedRow[i] === compressedRow[i + 1] && compressedRow[i] !== 0) {\n                compressedRow[i] *= 2;\n                this.score += compressedRow[i];\n                compressedRow[i + 1] = 0;\n            }\n            compressedRow = compressedRow.filter((num)=>num !== 0);\n            while(compressedRow.length < 4)compressedRow.push(0);\n            for(let i = 0; i < row.length; i++)row[i] = compressedRow[i];\n        });\n        if (JSON.stringify(this.state) !== prevState) this.spawnNewNum();\n        this.checkForWin();\n        this.checkForLose();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        const prevState = JSON.stringify(this.state);\n        this.state.forEach((row)=>{\n            let compressedRow = row.filter((num)=>num !== 0);\n            while(compressedRow.length < 4)compressedRow.unshift(0);\n            for(let i = compressedRow.length - 1; i > 0; i--)if (compressedRow[i] === compressedRow[i - 1] && compressedRow[i] !== 0) {\n                compressedRow[i] *= 2;\n                this.score += compressedRow[i];\n                compressedRow[i - 1] = 0;\n            }\n            compressedRow = compressedRow.filter((num)=>num !== 0);\n            while(compressedRow.length < 4)compressedRow.unshift(0);\n            for(let i = 0; i < row.length; i++)row[i] = compressedRow[i];\n        });\n        if (JSON.stringify(this.state) !== prevState) this.spawnNewNum();\n        this.checkForWin();\n        this.checkForLose();\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        const prevState = JSON.stringify(this.state);\n        const columns = this.state[0].map((_, colIndex)=>this.state.map((row)=>row[colIndex]));\n        columns.forEach((col)=>{\n            let compressedCol = col.filter((num)=>num !== 0);\n            while(compressedCol.length < 4)compressedCol.push(0);\n            for(let i = 0; i < compressedCol.length - 1; i++)if (compressedCol[i] === compressedCol[i + 1] && compressedCol[i] !== 0) {\n                compressedCol[i] *= 2;\n                this.score += compressedCol[i];\n                compressedCol[i + 1] = 0;\n            }\n            compressedCol = compressedCol.filter((num)=>num !== 0);\n            while(compressedCol.length < 4)compressedCol.push(0);\n            for(let i = 0; i < col.length; i++)col[i] = compressedCol[i];\n        });\n        this.state = columns[0].map((_, colIndex)=>columns.map((row)=>row[colIndex]));\n        if (JSON.stringify(this.state) !== prevState) this.spawnNewNum();\n        this.checkForWin();\n        this.checkForLose();\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        const prevState = JSON.stringify(this.state);\n        const columns = this.state[0].map((_, colIndex)=>this.state.map((row)=>row[colIndex]));\n        columns.forEach((col)=>{\n            let compressedCol = col.filter((num)=>num !== 0);\n            while(compressedCol.length < 4)compressedCol.unshift(0);\n            for(let i = compressedCol.length - 1; i > 0; i--)if (compressedCol[i] === compressedCol[i - 1] && compressedCol[i] !== 0) {\n                compressedCol[i] *= 2;\n                this.score += compressedCol[i];\n                compressedCol[i - 1] = 0;\n            }\n            compressedCol = compressedCol.filter((num)=>num !== 0);\n            while(compressedCol.length < 4)compressedCol.unshift(0);\n            for(let i = 0; i < col.length; i++)col[i] = compressedCol[i];\n        });\n        this.state = columns[0].map((_, colIndex)=>columns.map((row)=>row[colIndex]));\n        if (JSON.stringify(this.state) !== prevState) this.spawnNewNum();\n        this.checkForWin();\n        this.checkForLose();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.spawnNewNum();\n        this.spawnNewNum();\n        this.checkForLose();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.clearTable();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    spawnNewNum() {\n        if (!this.checkEmptyCells()) return;\n        const [a, b] = this.getRandomEmptyCell();\n        if (this.state[a][b] !== 0) return this.spawnNewNum();\n        this.state[a][b] = Math.floor(Math.random() * 11) === 10 ? 4 : 2;\n    }\n    getRandomEmptyCell() {\n        return [\n            Math.floor(Math.random() * 4),\n            Math.floor(Math.random() * 4)\n        ];\n    }\n    checkEmptyCells() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.state[i][j] === 0) return true;\n        }\n        return false;\n    }\n    clearTable() {\n        this.state = JSON.parse(JSON.stringify(this.initState));\n    }\n    checkForWin() {\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.state[i][j] === 2048) {\n                this.status = \"win\";\n                this.handleWin();\n                return;\n            }\n        }\n    }\n    checkForLose() {\n        if (!this.checkEmptyCells() && !this.checkMovesAvailable()) {\n            this.status = \"lose\";\n            this.handleLoss();\n        }\n    }\n    checkMovesAvailable() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.state[i][j] === 0) return true;\n            if (i < 3 && this.state[i][j] === this.state[i + 1][j]) return true;\n            if (j < 3 && this.state[i][j] === this.state[i][j + 1]) return true;\n        }\n        return false;\n    }\n    handleLoss() {\n        // Trigger an event or call a function to update the UI\n        const e = new Event(\"gameLost\");\n        document.dispatchEvent(e);\n    }\n    handleWin() {\n        // Trigger an event or call a function to update the UI\n        const e = new Event(\"gameWin\");\n        document.dispatchEvent(e);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\ndocument.getElementById(\"start-button\").onclick = ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$updateTable($09e991522ca7e64e$var$game.getState());\n    document.getElementById(\"start-button\").classList.add(\"hidden\");\n    document.getElementById(\"restart-button\").classList.remove(\"hidden\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n};\ndocument.getElementById(\"restart-button\").onclick = ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateTable($09e991522ca7e64e$var$game.getState());\n    $09e991522ca7e64e$var$score.innerText = $09e991522ca7e64e$var$game.getScore();\n    document.getElementById(\"start-button\").classList.remove(\"hidden\");\n    document.getElementById(\"restart-button\").classList.add(\"hidden\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n};\nconst $09e991522ca7e64e$var$table = document.querySelector(\".game-field\");\nfunction $09e991522ca7e64e$var$updateTable(state) {\n    for(let i = 0; i < 4; i++){\n        for(let j = 0; j < 4; j++)if (state[i][j] === 0) {\n            $09e991522ca7e64e$var$table.rows[i].cells[j].className = \"field-cell\";\n            $09e991522ca7e64e$var$table.rows[i].cells[j].innerText = \"\";\n        } else {\n            $09e991522ca7e64e$var$table.rows[i].cells[j].className = `field-cell field-cell--${state[i][j]}`;\n            $09e991522ca7e64e$var$table.rows[i].cells[j].innerText = state[i][j];\n        }\n    }\n}\nfunction $09e991522ca7e64e$var$winOrLoseCheck() {\n    if ($09e991522ca7e64e$var$game.getState() === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getState() === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"a\":\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                $09e991522ca7e64e$var$winOrLoseCheck();\n                break;\n            case \"d\":\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                $09e991522ca7e64e$var$winOrLoseCheck();\n                break;\n            case \"w\":\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                $09e991522ca7e64e$var$winOrLoseCheck();\n                break;\n            case \"s\":\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                $09e991522ca7e64e$var$winOrLoseCheck();\n                break;\n            default:\n                break;\n        }\n        $09e991522ca7e64e$var$updateTable($09e991522ca7e64e$var$game.getState());\n        $09e991522ca7e64e$var$score.innerText = $09e991522ca7e64e$var$game.getScore();\n    }\n});\ndocument.addEventListener(\"gameLost\", ()=>{\n    document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n});\ndocument.addEventListener(\"gameWin\", ()=>{\n    document.querySelector(\".message-win\").classList.remove(\"hidden\");\n});\n\n\n//# sourceMappingURL=index.76038c0c.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst score = document.querySelector('.game-score');\n\ndocument.getElementById('start-button').onclick = () => {\n  game.start();\n  updateTable(game.getState());\n  document.getElementById('start-button').classList.add('hidden');\n  document.getElementById('restart-button').classList.remove('hidden');\n  document.querySelector('.message-start').classList.add('hidden');\n};\n\ndocument.getElementById('restart-button').onclick = () => {\n  game.restart();\n  updateTable(game.getState());\n  score.innerText = game.getScore();\n  document.getElementById('start-button').classList.remove('hidden');\n  document.getElementById('restart-button').classList.add('hidden');\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n};\n\nconst table = document.querySelector('.game-field');\n\nfunction updateTable(state) {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (state[i][j] === 0) {\n        table.rows[i].cells[j].className = 'field-cell';\n        table.rows[i].cells[j].innerText = '';\n      } else {\n        table.rows[i].cells[j].className\n        = `field-cell field-cell--${state[i][j]}`;\n        table.rows[i].cells[j].innerText = state[i][j];\n      }\n    }\n  }\n}\n\nfunction winOrLoseCheck() {\n  if (game.getState() === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n\n  if (game.getState() === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'a':\n      case 'ArrowLeft':\n        game.moveLeft();\n        winOrLoseCheck();\n        break;\n      case 'd':\n      case 'ArrowRight':\n        game.moveRight();\n        winOrLoseCheck();\n        break;\n      case 'w':\n      case 'ArrowUp':\n        game.moveUp();\n        winOrLoseCheck();\n        break;\n      case 's':\n      case 'ArrowDown':\n        game.moveDown();\n        winOrLoseCheck();\n        break;\n      default:\n        break;\n    }\n\n    updateTable(game.getState());\n    score.innerText = game.getScore();\n  }\n});\n\ndocument.addEventListener('gameLost', () => {\n  document.querySelector('.message-lose').classList.remove('hidden');\n});\n\ndocument.addEventListener('gameWin', () => {\n  document.querySelector('.message-win').classList.remove('hidden');\n});\n","'use strict';\n\nclass Game {\n  initState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  state = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  status = 'idle';\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    if (initialState) {\n      this.state = JSON.parse(JSON.stringify(initialState));\n      this.initState = JSON.parse(JSON.stringify(initialState));\n    }\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    this.state.forEach((row) => {\n      let compressedRow = row.filter((num) => num !== 0);\n\n      while (compressedRow.length < 4) {\n        compressedRow.push(0);\n      }\n\n      for (let i = 0; i < compressedRow.length - 1; i++) {\n        if (\n          compressedRow[i] === compressedRow[i + 1] &&\n          compressedRow[i] !== 0\n        ) {\n          compressedRow[i] *= 2;\n          this.score += compressedRow[i];\n          compressedRow[i + 1] = 0;\n        }\n      }\n\n      compressedRow = compressedRow.filter((num) => num !== 0);\n\n      while (compressedRow.length < 4) {\n        compressedRow.push(0);\n      }\n\n      for (let i = 0; i < row.length; i++) {\n        row[i] = compressedRow[i];\n      }\n    });\n\n    if (JSON.stringify(this.state) !== prevState) {\n      this.spawnNewNum();\n    }\n\n    this.checkForWin();\n    this.checkForLose();\n  }\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    this.state.forEach((row) => {\n      let compressedRow = row.filter((num) => num !== 0);\n\n      while (compressedRow.length < 4) {\n        compressedRow.unshift(0);\n      }\n\n      for (let i = compressedRow.length - 1; i > 0; i--) {\n        if (\n          compressedRow[i] === compressedRow[i - 1] &&\n          compressedRow[i] !== 0\n        ) {\n          compressedRow[i] *= 2;\n          this.score += compressedRow[i];\n          compressedRow[i - 1] = 0;\n        }\n      }\n\n      compressedRow = compressedRow.filter((num) => num !== 0);\n\n      while (compressedRow.length < 4) {\n        compressedRow.unshift(0);\n      }\n\n      for (let i = 0; i < row.length; i++) {\n        row[i] = compressedRow[i];\n      }\n    });\n\n    if (JSON.stringify(this.state) !== prevState) {\n      this.spawnNewNum();\n    }\n\n    this.checkForWin();\n    this.checkForLose();\n  }\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    const columns = this.state[0].map(\n      (_, colIndex) => this.state.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    columns.forEach((col) => {\n      let compressedCol = col.filter((num) => num !== 0);\n\n      while (compressedCol.length < 4) {\n        compressedCol.push(0);\n      }\n\n      for (let i = 0; i < compressedCol.length - 1; i++) {\n        if (\n          compressedCol[i] === compressedCol[i + 1] &&\n          compressedCol[i] !== 0\n        ) {\n          compressedCol[i] *= 2;\n          this.score += compressedCol[i];\n          compressedCol[i + 1] = 0;\n        }\n      }\n\n      compressedCol = compressedCol.filter((num) => num !== 0);\n\n      while (compressedCol.length < 4) {\n        compressedCol.push(0);\n      }\n\n      for (let i = 0; i < col.length; i++) {\n        col[i] = compressedCol[i];\n      }\n    });\n\n    this.state = columns[0].map(\n      (_, colIndex) => columns.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    if (JSON.stringify(this.state) !== prevState) {\n      this.spawnNewNum();\n    }\n\n    this.checkForWin();\n    this.checkForLose();\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    const columns = this.state[0].map(\n      (_, colIndex) => this.state.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    columns.forEach((col) => {\n      let compressedCol = col.filter((num) => num !== 0);\n\n      while (compressedCol.length < 4) {\n        compressedCol.unshift(0);\n      }\n\n      for (let i = compressedCol.length - 1; i > 0; i--) {\n        if (\n          compressedCol[i] === compressedCol[i - 1] &&\n          compressedCol[i] !== 0\n        ) {\n          compressedCol[i] *= 2;\n          this.score += compressedCol[i];\n          compressedCol[i - 1] = 0;\n        }\n      }\n\n      compressedCol = compressedCol.filter((num) => num !== 0);\n\n      while (compressedCol.length < 4) {\n        compressedCol.unshift(0);\n      }\n\n      for (let i = 0; i < col.length; i++) {\n        col[i] = compressedCol[i];\n      }\n    });\n\n    this.state = columns[0].map(\n      (_, colIndex) => columns.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    if (JSON.stringify(this.state) !== prevState) {\n      this.spawnNewNum();\n    }\n\n    this.checkForWin();\n    this.checkForLose();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.spawnNewNum();\n    this.spawnNewNum();\n    this.checkForLose();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.clearTable();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  spawnNewNum() {\n    if (!this.checkEmptyCells()) {\n      return;\n    }\n\n    const [a, b] = this.getRandomEmptyCell();\n\n    if (this.state[a][b] !== 0) {\n      return this.spawnNewNum();\n    }\n\n    this.state[a][b] = Math.floor(Math.random() * 11) === 10 ? 4 : 2;\n  }\n\n  getRandomEmptyCell() {\n    return [Math.floor(Math.random() * 4), Math.floor(Math.random() * 4)];\n  }\n\n  checkEmptyCells() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  clearTable() {\n    this.state = JSON.parse(JSON.stringify(this.initState));\n  }\n\n  checkForWin() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 2048) {\n          this.status = 'win';\n          this.handleWin();\n\n          return;\n        }\n      }\n    }\n  }\n\n  checkForLose() {\n    if (!this.checkEmptyCells() && !this.checkMovesAvailable()) {\n      this.status = 'lose';\n      this.handleLoss();\n    }\n  }\n\n  checkMovesAvailable() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 0) {\n          return true;\n        }\n\n        if (i < 3 && this.state[i][j] === this.state[i + 1][j]) {\n          return true;\n        }\n\n        if (j < 3 && this.state[i][j] === this.state[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  handleLoss() {\n    // Trigger an event or call a function to update the UI\n    const e = new Event('gameLost');\n\n    document.dispatchEvent(e);\n  }\n  handleWin() {\n    // Trigger an event or call a function to update the UI\n    const e = new Event('gameWin');\n\n    document.dispatchEvent(e);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","initState","state","score","status","constructor","initialState","JSON","parse","stringify","moveLeft","prevState","forEach","row","compressedRow","filter","num","length","push","i","spawnNewNum","checkForWin","checkForLose","moveRight","unshift","moveUp","columns","map","_","colIndex","col","compressedCol","moveDown","getScore","getState","getStatus","start","restart","clearTable","checkEmptyCells","a","b","getRandomEmptyCell","Math","floor","random","j","handleWin","checkMovesAvailable","handleLoss","e","Event","document","dispatchEvent","$09e991522ca7e64e$var$score","querySelector","getElementById","onclick","$09e991522ca7e64e$var$updateTable","classList","add","remove","innerText","$09e991522ca7e64e$var$table","rows","cells","className","$09e991522ca7e64e$var$winOrLoseCheck","addEventListener","key"],"version":3,"file":"index.76038c0c.js.map"}