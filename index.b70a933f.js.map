{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$71511d61b312f219(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"initState\", [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ]);\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"state\", [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ]);\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"score\", 0);\n        (0, $cd5a47cf8ef6d766$export$71511d61b312f219)(this, \"status\", \"idle\");\n        if (initialState) {\n            this.state = JSON.parse(JSON.stringify(initialState));\n            this.initState = JSON.parse(JSON.stringify(initialState));\n        }\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                if (this.status !== \"playing\") return;\n                var prevState = JSON.stringify(this.state);\n                this.state.forEach(function(row) {\n                    var compressedRow = row.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(compressedRow.length < 4)compressedRow.push(0);\n                    for(var i = 0; i < compressedRow.length - 1; i++)if (compressedRow[i] === compressedRow[i + 1] && compressedRow[i] !== 0) {\n                        compressedRow[i] *= 2;\n                        _this.score += compressedRow[i];\n                        compressedRow[i + 1] = 0;\n                    }\n                    compressedRow = compressedRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(compressedRow.length < 4)compressedRow.push(0);\n                    for(var i1 = 0; i1 < row.length; i1++)row[i1] = compressedRow[i1];\n                });\n                if (JSON.stringify(this.state) !== prevState) this.spawnNewNum();\n                this.checkForWin();\n                this.checkForLose();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                if (this.status !== \"playing\") return;\n                var prevState = JSON.stringify(this.state);\n                this.state.forEach(function(row) {\n                    var compressedRow = row.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(compressedRow.length < 4)compressedRow.unshift(0);\n                    for(var i = compressedRow.length - 1; i > 0; i--)if (compressedRow[i] === compressedRow[i - 1] && compressedRow[i] !== 0) {\n                        compressedRow[i] *= 2;\n                        _this.score += compressedRow[i];\n                        compressedRow[i - 1] = 0;\n                    }\n                    compressedRow = compressedRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(compressedRow.length < 4)compressedRow.unshift(0);\n                    for(var i1 = 0; i1 < row.length; i1++)row[i1] = compressedRow[i1];\n                });\n                if (JSON.stringify(this.state) !== prevState) this.spawnNewNum();\n                this.checkForWin();\n                this.checkForLose();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                if (this.status !== \"playing\") return;\n                var prevState = JSON.stringify(this.state);\n                var columns = this.state[0].map(function(_, colIndex) {\n                    return _this.state.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n                columns.forEach(function(col) {\n                    var compressedCol = col.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(compressedCol.length < 4)compressedCol.push(0);\n                    for(var i = 0; i < compressedCol.length - 1; i++)if (compressedCol[i] === compressedCol[i + 1] && compressedCol[i] !== 0) {\n                        compressedCol[i] *= 2;\n                        _this.score += compressedCol[i];\n                        compressedCol[i + 1] = 0;\n                    }\n                    compressedCol = compressedCol.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(compressedCol.length < 4)compressedCol.push(0);\n                    for(var i1 = 0; i1 < col.length; i1++)col[i1] = compressedCol[i1];\n                });\n                this.state = columns[0].map(function(_, colIndex) {\n                    return columns.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n                if (JSON.stringify(this.state) !== prevState) this.spawnNewNum();\n                this.checkForWin();\n                this.checkForLose();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                if (this.status !== \"playing\") return;\n                var prevState = JSON.stringify(this.state);\n                var columns = this.state[0].map(function(_, colIndex) {\n                    return _this.state.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n                columns.forEach(function(col) {\n                    var compressedCol = col.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(compressedCol.length < 4)compressedCol.unshift(0);\n                    for(var i = compressedCol.length - 1; i > 0; i--)if (compressedCol[i] === compressedCol[i - 1] && compressedCol[i] !== 0) {\n                        compressedCol[i] *= 2;\n                        _this.score += compressedCol[i];\n                        compressedCol[i - 1] = 0;\n                    }\n                    compressedCol = compressedCol.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(compressedCol.length < 4)compressedCol.unshift(0);\n                    for(var i1 = 0; i1 < col.length; i1++)col[i1] = compressedCol[i1];\n                });\n                this.state = columns[0].map(function(_, colIndex) {\n                    return columns.map(function(row) {\n                        return row[colIndex];\n                    });\n                });\n                if (JSON.stringify(this.state) !== prevState) this.spawnNewNum();\n                this.checkForWin();\n                this.checkForLose();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.spawnNewNum();\n                this.spawnNewNum();\n                this.checkForLose();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.clearTable();\n                this.score = 0;\n                this.status = \"idle\";\n            }\n        },\n        {\n            key: \"spawnNewNum\",\n            value: function spawnNewNum() {\n                if (!this.checkEmptyCells()) return;\n                var _this_getRandomEmptyCell = (0, $efec029548ccee7f$export$71511d61b312f219)(this.getRandomEmptyCell(), 2), a = _this_getRandomEmptyCell[0], b = _this_getRandomEmptyCell[1];\n                if (this.state[a][b] !== 0) return this.spawnNewNum();\n                this.state[a][b] = Math.floor(Math.random() * 11) === 10 ? 4 : 2;\n            }\n        },\n        {\n            key: \"getRandomEmptyCell\",\n            value: function getRandomEmptyCell() {\n                return [\n                    Math.floor(Math.random() * 4),\n                    Math.floor(Math.random() * 4)\n                ];\n            }\n        },\n        {\n            key: \"checkEmptyCells\",\n            value: function checkEmptyCells() {\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    if (this.state[i][j] === 0) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"clearTable\",\n            value: function clearTable() {\n                this.state = JSON.parse(JSON.stringify(this.initState));\n            }\n        },\n        {\n            key: \"checkForWin\",\n            value: function checkForWin() {\n                for(var i = 0; i < 4; i++){\n                    for(var j = 0; j < 4; j++)if (this.state[i][j] === 2048) {\n                        this.status = \"win\";\n                        this.handleWin();\n                        return;\n                    }\n                }\n            }\n        },\n        {\n            key: \"checkForLose\",\n            value: function checkForLose() {\n                if (!this.checkEmptyCells() && !this.checkMovesAvailable()) {\n                    this.status = \"lose\";\n                    this.handleLoss();\n                }\n            }\n        },\n        {\n            key: \"checkMovesAvailable\",\n            value: function checkMovesAvailable() {\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++){\n                    if (this.state[i][j] === 0) return true;\n                    if (i < 3 && this.state[i][j] === this.state[i + 1][j]) return true;\n                    if (j < 3 && this.state[i][j] === this.state[i][j + 1]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"handleLoss\",\n            value: function handleLoss() {\n                // Trigger an event or call a function to update the UI\n                var e = new Event(\"gameLost\");\n                document.dispatchEvent(e);\n            }\n        },\n        {\n            key: \"handleWin\",\n            value: function handleWin() {\n                // Trigger an event or call a function to update the UI\n                var e = new Event(\"gameWin\");\n                document.dispatchEvent(e);\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\ndocument.getElementById(\"start-button\").onclick = function() {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$updateTable($197cd56b15c33885$var$game.getState());\n    document.getElementById(\"start-button\").classList.add(\"hidden\");\n    document.getElementById(\"restart-button\").classList.remove(\"hidden\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n};\ndocument.getElementById(\"restart-button\").onclick = function() {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$updateTable($197cd56b15c33885$var$game.getState());\n    $197cd56b15c33885$var$score.innerText = $197cd56b15c33885$var$game.getScore();\n    document.getElementById(\"start-button\").classList.remove(\"hidden\");\n    document.getElementById(\"restart-button\").classList.add(\"hidden\");\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n};\nvar $197cd56b15c33885$var$table = document.querySelector(\".game-field\");\nfunction $197cd56b15c33885$var$updateTable(state) {\n    for(var i = 0; i < 4; i++){\n        for(var j = 0; j < 4; j++)if (state[i][j] === 0) {\n            $197cd56b15c33885$var$table.rows[i].cells[j].className = \"field-cell\";\n            $197cd56b15c33885$var$table.rows[i].cells[j].innerText = \"\";\n        } else {\n            $197cd56b15c33885$var$table.rows[i].cells[j].className = \"field-cell field-cell--\".concat(state[i][j]);\n            $197cd56b15c33885$var$table.rows[i].cells[j].innerText = state[i][j];\n        }\n    }\n}\nfunction $197cd56b15c33885$var$winOrLoseCheck() {\n    if ($197cd56b15c33885$var$game.getState() === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    if ($197cd56b15c33885$var$game.getState() === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\ndocument.addEventListener(\"keydown\", function(e) {\n    if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"a\":\n            case \"ArrowLeft\":\n                $197cd56b15c33885$var$game.moveLeft();\n                $197cd56b15c33885$var$winOrLoseCheck();\n                break;\n            case \"d\":\n            case \"ArrowRight\":\n                $197cd56b15c33885$var$game.moveRight();\n                $197cd56b15c33885$var$winOrLoseCheck();\n                break;\n            case \"w\":\n            case \"ArrowUp\":\n                $197cd56b15c33885$var$game.moveUp();\n                $197cd56b15c33885$var$winOrLoseCheck();\n                break;\n            case \"s\":\n            case \"ArrowDown\":\n                $197cd56b15c33885$var$game.moveDown();\n                $197cd56b15c33885$var$winOrLoseCheck();\n                break;\n            default:\n                break;\n        }\n        $197cd56b15c33885$var$updateTable($197cd56b15c33885$var$game.getState());\n        $197cd56b15c33885$var$score.innerText = $197cd56b15c33885$var$game.getScore();\n    }\n});\ndocument.addEventListener(\"gameLost\", function() {\n    document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n});\ndocument.addEventListener(\"gameWin\", function() {\n    document.querySelector(\".message-win\").classList.remove(\"hidden\");\n});\n\n})();\n//# sourceMappingURL=index.b70a933f.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst score = document.querySelector('.game-score');\n\ndocument.getElementById('start-button').onclick = () => {\n  game.start();\n  updateTable(game.getState());\n  document.getElementById('start-button').classList.add('hidden');\n  document.getElementById('restart-button').classList.remove('hidden');\n  document.querySelector('.message-start').classList.add('hidden');\n};\n\ndocument.getElementById('restart-button').onclick = () => {\n  game.restart();\n  updateTable(game.getState());\n  score.innerText = game.getScore();\n  document.getElementById('start-button').classList.remove('hidden');\n  document.getElementById('restart-button').classList.add('hidden');\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n};\n\nconst table = document.querySelector('.game-field');\n\nfunction updateTable(state) {\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      if (state[i][j] === 0) {\n        table.rows[i].cells[j].className = 'field-cell';\n        table.rows[i].cells[j].innerText = '';\n      } else {\n        table.rows[i].cells[j].className\n        = `field-cell field-cell--${state[i][j]}`;\n        table.rows[i].cells[j].innerText = state[i][j];\n      }\n    }\n  }\n}\n\nfunction winOrLoseCheck() {\n  if (game.getState() === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  }\n\n  if (game.getState() === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'a':\n      case 'ArrowLeft':\n        game.moveLeft();\n        winOrLoseCheck();\n        break;\n      case 'd':\n      case 'ArrowRight':\n        game.moveRight();\n        winOrLoseCheck();\n        break;\n      case 'w':\n      case 'ArrowUp':\n        game.moveUp();\n        winOrLoseCheck();\n        break;\n      case 's':\n      case 'ArrowDown':\n        game.moveDown();\n        winOrLoseCheck();\n        break;\n      default:\n        break;\n    }\n\n    updateTable(game.getState());\n    score.innerText = game.getScore();\n  }\n});\n\ndocument.addEventListener('gameLost', () => {\n  document.querySelector('.message-lose').classList.remove('hidden');\n});\n\ndocument.addEventListener('gameWin', () => {\n  document.querySelector('.message-win').classList.remove('hidden');\n});\n","'use strict';\n\nclass Game {\n  initState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  state = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n\n  status = 'idle';\n\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    if (initialState) {\n      this.state = JSON.parse(JSON.stringify(initialState));\n      this.initState = JSON.parse(JSON.stringify(initialState));\n    }\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    this.state.forEach((row) => {\n      let compressedRow = row.filter((num) => num !== 0);\n\n      while (compressedRow.length < 4) {\n        compressedRow.push(0);\n      }\n\n      for (let i = 0; i < compressedRow.length - 1; i++) {\n        if (\n          compressedRow[i] === compressedRow[i + 1] &&\n          compressedRow[i] !== 0\n        ) {\n          compressedRow[i] *= 2;\n          this.score += compressedRow[i];\n          compressedRow[i + 1] = 0;\n        }\n      }\n\n      compressedRow = compressedRow.filter((num) => num !== 0);\n\n      while (compressedRow.length < 4) {\n        compressedRow.push(0);\n      }\n\n      for (let i = 0; i < row.length; i++) {\n        row[i] = compressedRow[i];\n      }\n    });\n\n    if (JSON.stringify(this.state) !== prevState) {\n      this.spawnNewNum();\n    }\n\n    this.checkForWin();\n    this.checkForLose();\n  }\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    this.state.forEach((row) => {\n      let compressedRow = row.filter((num) => num !== 0);\n\n      while (compressedRow.length < 4) {\n        compressedRow.unshift(0);\n      }\n\n      for (let i = compressedRow.length - 1; i > 0; i--) {\n        if (\n          compressedRow[i] === compressedRow[i - 1] &&\n          compressedRow[i] !== 0\n        ) {\n          compressedRow[i] *= 2;\n          this.score += compressedRow[i];\n          compressedRow[i - 1] = 0;\n        }\n      }\n\n      compressedRow = compressedRow.filter((num) => num !== 0);\n\n      while (compressedRow.length < 4) {\n        compressedRow.unshift(0);\n      }\n\n      for (let i = 0; i < row.length; i++) {\n        row[i] = compressedRow[i];\n      }\n    });\n\n    if (JSON.stringify(this.state) !== prevState) {\n      this.spawnNewNum();\n    }\n\n    this.checkForWin();\n    this.checkForLose();\n  }\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    const columns = this.state[0].map(\n      (_, colIndex) => this.state.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    columns.forEach((col) => {\n      let compressedCol = col.filter((num) => num !== 0);\n\n      while (compressedCol.length < 4) {\n        compressedCol.push(0);\n      }\n\n      for (let i = 0; i < compressedCol.length - 1; i++) {\n        if (\n          compressedCol[i] === compressedCol[i + 1] &&\n          compressedCol[i] !== 0\n        ) {\n          compressedCol[i] *= 2;\n          this.score += compressedCol[i];\n          compressedCol[i + 1] = 0;\n        }\n      }\n\n      compressedCol = compressedCol.filter((num) => num !== 0);\n\n      while (compressedCol.length < 4) {\n        compressedCol.push(0);\n      }\n\n      for (let i = 0; i < col.length; i++) {\n        col[i] = compressedCol[i];\n      }\n    });\n\n    this.state = columns[0].map(\n      (_, colIndex) => columns.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    if (JSON.stringify(this.state) !== prevState) {\n      this.spawnNewNum();\n    }\n\n    this.checkForWin();\n    this.checkForLose();\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const prevState = JSON.stringify(this.state);\n\n    const columns = this.state[0].map(\n      (_, colIndex) => this.state.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    columns.forEach((col) => {\n      let compressedCol = col.filter((num) => num !== 0);\n\n      while (compressedCol.length < 4) {\n        compressedCol.unshift(0);\n      }\n\n      for (let i = compressedCol.length - 1; i > 0; i--) {\n        if (\n          compressedCol[i] === compressedCol[i - 1] &&\n          compressedCol[i] !== 0\n        ) {\n          compressedCol[i] *= 2;\n          this.score += compressedCol[i];\n          compressedCol[i - 1] = 0;\n        }\n      }\n\n      compressedCol = compressedCol.filter((num) => num !== 0);\n\n      while (compressedCol.length < 4) {\n        compressedCol.unshift(0);\n      }\n\n      for (let i = 0; i < col.length; i++) {\n        col[i] = compressedCol[i];\n      }\n    });\n\n    this.state = columns[0].map(\n      (_, colIndex) => columns.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n\n    if (JSON.stringify(this.state) !== prevState) {\n      this.spawnNewNum();\n    }\n\n    this.checkForWin();\n    this.checkForLose();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.spawnNewNum();\n    this.spawnNewNum();\n    this.checkForLose();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.clearTable();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  spawnNewNum() {\n    if (!this.checkEmptyCells()) {\n      return;\n    }\n\n    const [a, b] = this.getRandomEmptyCell();\n\n    if (this.state[a][b] !== 0) {\n      return this.spawnNewNum();\n    }\n\n    this.state[a][b] = Math.floor(Math.random() * 11) === 10 ? 4 : 2;\n  }\n\n  getRandomEmptyCell() {\n    return [Math.floor(Math.random() * 4), Math.floor(Math.random() * 4)];\n  }\n\n  checkEmptyCells() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  clearTable() {\n    this.state = JSON.parse(JSON.stringify(this.initState));\n  }\n\n  checkForWin() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 2048) {\n          this.status = 'win';\n          this.handleWin();\n\n          return;\n        }\n      }\n    }\n  }\n\n  checkForLose() {\n    if (!this.checkEmptyCells() && !this.checkMovesAvailable()) {\n      this.status = 'lose';\n      this.handleLoss();\n    }\n  }\n\n  checkMovesAvailable() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 0) {\n          return true;\n        }\n\n        if (i < 3 && this.state[i][j] === this.state[i + 1][j]) {\n          return true;\n        }\n\n        if (j < 3 && this.state[i][j] === this.state[i][j + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  handleLoss() {\n    // Trigger an event or call a function to update the UI\n    const e = new Event('gameLost');\n\n    document.dispatchEvent(e);\n  }\n  handleWin() {\n    // Trigger an event or call a function to update the UI\n    const e = new Event('gameWin');\n\n    document.dispatchEvent(e);\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n"],"names":["$cd5a47cf8ef6d766$export$71511d61b312f219","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","state","JSON","parse","stringify","initState","_this","status","prevState","forEach","row","compressedRow","filter","num","push","score","i1","spawnNewNum","checkForWin","checkForLose","unshift","columns","map","_","colIndex","col","compressedCol","clearTable","checkEmptyCells","_this_getRandomEmptyCell","isArray","getRandomEmptyCell","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","err","o","minLen","n","prototype","toString","slice","constructor","name","from","test","a","b","Math","floor","random","j","handleWin","checkMovesAvailable","handleLoss","e","Event","document","dispatchEvent","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","$197cd56b15c33885$var$score","querySelector","getElementById","onclick","start","$197cd56b15c33885$var$updateTable","getState","classList","add","remove","restart","innerText","getScore","$197cd56b15c33885$var$table","rows","cells","className","concat","$197cd56b15c33885$var$winOrLoseCheck","addEventListener","getStatus","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.b70a933f.js.map"}